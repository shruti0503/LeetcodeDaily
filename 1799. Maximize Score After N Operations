
class Solution {
public:
    int maxScore(vector<int>& nums) {
        vector<int> dp(1<<14,-1);
        int m=nums.size();
        int  n = nums.size()/2;
        vector<vector<int>> gcd(m,vector<int>(m,0));
        //matix to store gcd
        for(int i=0;i<m;i++){
            for(int j=0;j<m;j++){
                gcd[i][j]=__gcd(nums[i],nums[j]);
            }
        }
        return func(nums,1,0,dp,gcd);
        //passing nums input array
        //operations op initially as 1
        //0 is the mask
        //dp is the dp array
        //gcd is the precalculated gcd matrix

        
    }
    
         j=0   j=1   j=2   j=3
i=0   3      4      6      8
i=1   4      4      2      4
i=2   6      2      6      2
i=3   8      4      2      8
For example, gcd[0][2] corresponds to the GCD between nums[0] (which is 3) and nums[2] (which is 6).
Similarly, gcd[1][3] corresponds to the GCD between nums[1] (which is 4) and nums[3] (which is 8).

I hope this clarifies the indexing and the corresponding GCD values in the gcd matrix for the given nums array [3, 4, 6, 8].
    int func(vector<int> nums, int op,int mask, vector<int>& dp,vector<vector<int>>& gcd){
        int m=nums.size();
        int  n = nums.size()/2;
        if(op > n) return 0;
        if(dp[mask]!=-1) return dp[mask];
        for(int i=0;i<m;i++){
            if(mask&(1<<i)) continue; 
            for(int j=i+1;j<m;j++){
                if(mask & (1<<j)) continue;
                int newMask=(1<<i)|(1<<j)| mask;
                int score=op*gcd[i][j]+func(nums,op+1,newMask,dp,gcd);
                dp[mask]=max(dp[mask],score);
            }
        }
        return dp[mask];
    }
};


The line `if( (mask & (1<<j)) ) continue;` is a check to skip the current iteration of the inner loop 
if the `j`-th bit of the `mask` is already set (i.e., equal to 1).

Let's break down the line to understand its functionality:

1. `(1 << j)`: This expression shifts the binary representation of the number 1 by `j` positions to the left. 
For example, if `j` is 2, `(1 << j)` would result in binary 100 (which is 4 in decimal).

2. `mask & (1 << j)`: This performs a bitwise AND operation between `mask` and `(1 << j)`. 
It effectively checks if the `j`-th bit of `mask` is set or not. If the `j`-th bit is set (equal to 1), 
the result of the bitwise AND will be non-zero, and the condition will be considered true.

3. `if( (mask & (1 << j)) )`: This condition checks if the `j`-th bit of `mask` is set or not.
If it is set, meaning the condition is true, the code inside the `if` block is executed.

4. `continue;`: The `continue` statement causes the current iteration of the inner loop to be skipped, 
and the loop proceeds to the next iteration.

In the given code, the purpose of this check is to ensure that the same number is not chosen multiple times.
If the `j`-th bit of `mask` is already set, it means that the number at index `j` has already been chosen, 
and the code continues to the next iteration, skipping the current number.

By skipping the iteration, the code ensures that the same number is not chosen again,
maintaining the constraint of choosing two numbers from the same group at each step.
