class Solution {
public:
bool dfs(int node,int col,vector<int>&color,vector<vector<int>>&graph){
    //initally marking the root node in the visited array
    color[node]=col;
    //iterating over adjacent c list  and if they are unvisited and then  marking them with the opposite color
    for(auto it:graph[node]){
        if(color[it]==-1){
            //if my dfs returns false 
            if(dfs(it,!col,color,graph)==false) return false;
        }
        //if my adjacent node has the same colour as the other adjacent node then return false
        else if(color[it]==col){ 
            return false;
        }

    }
    return true;
}
    bool isBipartite(vector<vector<int>>& graph) {
        //visited array 
        //initally marking it as -1
        int n=graph.size();
        
        // vector<int>color[n];
        vector<int>color(n,-1);
        //making dfs call for each vectrices
        for(int i=0;i<n;i++){
           
            if(color[i]==-1){
                if(dfs(i,0,color,graph)==false) return false;
            }
        }
        return true;

        
    }
};
