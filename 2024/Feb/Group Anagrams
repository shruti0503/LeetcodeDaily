//Brute force  O(m nlogn)
var groupAnagrams = function(strs) {

    const map =new Map();
    for(let i=0;i<strs.length;i++){
        const sortedStr=strs[i].split('').sort().join(''); // eat 
        if(map.has(sortedStr)){
            map.get(sortedStr).push(strs[i]);  //eat 
        }
        else{
            map.set(sortedStr,[strs[i]]);
        }
    }

    const result =Array.from(map.values());
    return result;
    
};

//optimal 
///charCodeAt method returns an integer representing the Unicode 
// code point of the character at the specified index.
// c.charCodeAt(0) - 'a'.charCodeAt(0): 
// This calculates the difference between the Unicode code point of the character c 
// and the Unicode code point of the letter 'a'. 
// This essentially maps each lowercase letter to an index starting from 0. 
// For example, 'a' would result in 0, 'b' in 1, and so on.


var getSignature= function(s){
    const count=Array(26).fill(0);
    for(const c of s){
        //if c is 'a', the count at index 0 will be incremented.
        // If c is 'b', the count at index 1 will be incremented, and so on.
        count[c.charCodeAt(0)-'a'.charCodeAt(0)]++

    }
    const result=[];
    for(let i=0;i<26;i++){
        if(count[i]!==0){
            result.push(String.fromCharCode(i+'a'.charCodeAt(0)))
        }
    }

    return result.join('');
   //  This loop iterates through the count array. 
   //  For each index where the count is not zero, 
   //  it pushes the corresponding lowercase letter to the result array using String.fromCharCode. 
   //  This builds an array of unique characters present in the input string.
}
var groupAnagrams = function(strs) {
   const res=[];
   const groups = new Map();

   for(const s of strs){
       const signature=getSignature(s);
       if(!groups.has(signature)){
           groups.set(signature,[]);
       }

       groups.get(signature).push(s);
   }

   groups.forEach(value => res.push(value));

   return res;
};

// The `getSignature` function calculates a character signature for each string by counting 
// the occurrences of each lowercase letter. `groupAnagrams` then uses a Map to group strings
//  with the same signature. The final result is an array of arrays containing anagrams 
//  grouped together based on their character signatures.


// C++ OPTIMAL

// class Solution {
//     public:
//         string getSignature(const string& s) {
//             vector<int> count(26, 0);
//             for (char c : s) {
//                 count[c - 'a']++;
//             }
    
//             stringstream ss;
//             for (int i = 0; i < 26; i++) {
//                 if (count[i] != 0) {
//                     ss << (char)('a' + i) << count[i];
//                 }
//             }
//             return ss.str();
//         }
    
//         vector<vector<string>> groupAnagrams(vector<string>& strs) {
//             vector<vector<string>> result;
//             unordered_map<string, vector<string>> groups;
    
//             for (const string& s : strs) {
//                 groups[getSignature(s)].push_back(s);
//             }
    
//             for (const auto& entry : groups) {
//                 result.push_back(entry.second);
//             }
    
//             return result;
//         }
//     };

// }
    