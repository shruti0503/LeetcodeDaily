/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 
class Solution {
public:
int d=0;
   int func(TreeNode* node){
    if(!node) return 0;
      int leftHeight=func(node->left);
      int rightHeight=func(node-> right);
      
      // Calculate the diameter at the current
        // node and update the global variable
      d=max(d, leftHeight+rightHeight);

      // Return the height
      // of the current subtree
      return 1+max(leftHeight, rightHeight);
   }
    int diameterOfBinaryTree(TreeNode* root) {
        // diamater =? length longest opath beyween any two nodes in a tree
        // this path may or may not pass through the root of the 
        // caluclate height at every curving piiunt 

        // from any node, we can go right left and count the longest path 

        func(root);
        return d;
        
        
    }
};